from datetime import datetime, time, timedelta, timezone
from typing import Dict, Any, List
from config import DAY_SHIFT_START, NIGHT_SHIFT_START, MSK_TIMEZONE_OFFSET, PRODUCTION_TIMEOUT, LAB_TIMEOUT

def get_msk_time() -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö"""
    utc_time = datetime.now(timezone.utc)
    msk_time = utc_time + timedelta(hours=MSK_TIMEZONE_OFFSET)
    return msk_time

def get_current_shift() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –ø–æ –ú–°–ö"""
    now = get_msk_time()
    current_hour = now.hour
    
    if DAY_SHIFT_START <= current_hour < NIGHT_SHIFT_START:
        return "–¥–Ω–µ–≤–Ω–∞—è"
    else:
        return "–Ω–æ—á–Ω–∞—è"

def format_msk_time(dt: datetime = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–æ –ú–°–ö"""
    if dt is None:
        dt = get_msk_time()
    return dt.strftime("%d.%m.%Y %H:%M:%S")

def format_time_elapsed(time_input) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if isinstance(time_input, int):  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –º–∏–Ω—É—Ç—ã
        minutes = time_input
    else:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω timestamp
        if isinstance(time_input, str):
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
            time_str = time_input.split('+')[0]  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
            if 'Z' in time_str:
                past_time = datetime.fromisoformat(time_str.replace('Z', '+00:00'))
                past_time = past_time.replace(tzinfo=None)  # –î–µ–ª–∞–µ–º naive
            else:
                past_time = datetime.fromisoformat(time_str)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
            past_time = time_input.replace(tzinfo=None) if hasattr(time_input, 'tzinfo') and time_input.tzinfo else time_input
            
        now = datetime.now()
        elapsed = now - past_time
        minutes = int(elapsed.total_seconds() / 60)
    
    if minutes < 60:
        return f"{minutes} –º–∏–Ω"
    else:
        hours = minutes // 60
        mins = minutes % 60
        return f"{hours}—á {mins}–º–∏–Ω"

def format_ticket_message(ticket_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∏–∫–µ—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
    status_map = {
        'production_started': 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞—Ç–æ',
        'awaiting_sample': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–±—ã',
        'sample_sent': 'üì§ –ü—Ä–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
        'sample_received': 'üî¨ –ü—Ä–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞',
        'analysis_in_progress': '‚öóÔ∏è –ê–Ω–∞–ª–∏–∑',
        'approved': '‚úÖ –î–æ–ø—É—â–µ–Ω',
        'correction_required': '‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
        'awaiting_discharge': 'üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–∞—á–∫–∏',
        'completed': 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω'
    }
    
    # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    current_step_map = {
        'awaiting_sample': '–û–∂–∏–¥. –ø—Ä–æ–±—É',
        'awaiting_lab_reception': '–û–∂–∏–¥. –ª–∞–±',
        'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑',
        'awaiting_discharge': '–û–∂–∏–¥. –æ—Ç–∫–∞—á–∫–∏',
        'awaiting_correction': '–û–∂–∏–¥. –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
    }
    
    message = f"üé´  –¢–∏–∫–µ—Ç {ticket_data['ticket_id']}\n"
    message += f"üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {ticket_data['product']} | {ticket_data['brand']}\n"
    message += f"‚öóÔ∏è –ú–∏–∫—Å–µ—Ä: {ticket_data['mixer']}\n"
    message += f"üìä –°—Ç–∞—Ç—É—Å: {status_map.get(ticket_data['status'], ticket_data['status'])}\n"
    message += f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {ticket_data.get('username', 'N/A')}\n"
    
    if ticket_data.get('current_step'):
        step_text = current_step_map.get(ticket_data['current_step'], ticket_data['current_step'])
        message += f"üî∞ –®–∞–≥: {step_text}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    corrections_count = len(ticket_data.get('corrections_history', []))
    if corrections_count > 0:
        message += f"üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {corrections_count}\n"
    
    return message

def format_status_ru(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    status_map = {
        'free': '–°–≤–æ–±–æ–¥–µ–Ω',
        'production_started': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞—á–∞—Ç–æ',
        'awaiting_sample': '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–±—ã',
        'sample_sent': '–ü—Ä–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
        'sample_received': '–ü—Ä–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞',
        'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        'approved': '–î–æ–ø—É—â–µ–Ω',
        'correction_required': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
        'awaiting_discharge': '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–∞—á–∫–∏',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω'
    }
    return status_map.get(status, status)

def format_step_ru(step: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —à–∞–≥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    step_map = {
        'awaiting_sample': '–û–∂–∏–¥. –ø—Ä–æ–±—É',
        'awaiting_lab_reception': '–û–∂–∏–¥. –ª–∞–±',
        'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑',
        'awaiting_discharge': '–û–∂–∏–¥. –æ—Ç–∫–∞—á–∫–∏',
        'awaiting_correction': '–û–∂–∏–¥. –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        'manually_closed': '–ó–∞–∫—Ä—ã—Ç –≤—Ä—É—á–Ω—É—é'
    }
    return step_map.get(step, step)

def check_timeout(ticket_data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
    now = datetime.now()  # naive datetime
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    if ticket_data.get('history'):
        last_action = max(ticket_data['history'], key=lambda x: x['timestamp'])
        last_time_str = last_action['timestamp']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ naive datetime
        last_time_str = last_time_str.split('+')[0]  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        if 'Z' in last_time_str:
            last_time = datetime.fromisoformat(last_time_str.replace('Z', '+00:00'))
            last_time = last_time.replace(tzinfo=None)
        else:
            last_time = datetime.fromisoformat(last_time_str)
        
        elapsed_minutes = (now - last_time).total_seconds() / 60
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if ticket_data['status'] in ['awaiting_sample', 'correction_required']:
            if elapsed_minutes > PRODUCTION_TIMEOUT:
                return {'timed_out': True, 'message': '‚ö†Ô∏è –ü–†–û–°–†–û–ß–ö–ê! –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ–±—É –≤–æ–≤—Ä–µ–º—è'}
        
        elif ticket_data['status'] in ['sample_received', 'analysis_in_progress']:
            if elapsed_minutes > LAB_TIMEOUT:
                return {'timed_out': True, 'message': '‚ö†Ô∏è –ü–†–û–°–†–û–ß–ö–ê! –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ –ø—Ä–æ–≤–µ–ª–∞ –∞–Ω–∞–ª–∏–∑ –≤–æ–≤—Ä–µ–º—è'}
    
    return {'timed_out': False}

def is_valid_number(input_str: str, value_type: str = "float") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º"""
    try:
        if value_type == "float":
            value = float(input_str)
            return value >= 0
        elif value_type == "int":
            value = int(input_str)
            return value >= 0
        return False
    except ValueError:
        return False

def get_available_mixers(product: str, technology: str) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Å–µ—Ä—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"""
    from config import PRODUCT_MIXERS
    
    available = PRODUCT_MIXERS.get(product, [])
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
    if product == "–ü–æ—Å—É–¥–∞" and technology == "–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è":
        # –î–ª—è –ø–æ—Å—É–¥—ã –Ω–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
        available = []
    elif product == "–ê–®" and technology == "–°—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è":
        # –î–ª—è –ê–® —Å—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞  
        available = []
    elif technology == "–°—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è":
        available = [m for m in available if m <= 8]
    elif technology == "–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è":
        available = [m for m in available if m >= 9]
    
    return [f"–ú–∏–∫—Å–µ—Ä_{m}" for m in sorted(available)]