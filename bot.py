import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, MenuButtonCommands, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from telegram.constants import ParseMode

from config import BOT_TOKEN, GROUP_ID
from database import Database
from utils import format_ticket_message, get_current_shift, get_msk_time, format_msk_time, get_available_mixers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    MAIN_MENU,
    PRODUCTION_MENU,
    LAB_MENU,
    NEW_BATCH_PRODUCT,
    NEW_BATCH_BRAND,
    NEW_BATCH_TECHNOLOGY,
    NEW_BATCH_MIXER,
    CONFIRM_START,
    ACTION_MENU,
    SAMPLE_SENT,
    SAMPLE_RECEIVED,
    ANALYSIS_RESULT,
    CORRECTION_NOTE,
    CONFIRM_DISCHARGE
) = range(14)

db = Database()

async def post_init(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"),
        BotCommand("status", "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(commands)
    menu_button = MenuButtonCommands()
    await application.bot.set_chat_menu_button(menu_button=menu_button)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    user = update.message.from_user
    context.user_data['username'] = user.username or user.first_name

    keyboard = [["üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üè≠ –°–∏—Å—Ç–µ–º–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text

    if "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" in text:
        keyboard = [["üÜï –ù–æ–≤—ã–π –∑–∞–º–µ—Å", "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è", "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üè≠ –†–∞–∑–¥–µ–ª –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:", reply_markup=reply_markup)
        return PRODUCTION_MENU

    elif "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è" in text:
        keyboard = [["üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è", "üìà –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üî¨ –†–∞–∑–¥–µ–ª –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:", reply_markup=reply_markup)
        return LAB_MENU

    elif "üîô –ù–∞–∑–∞–¥" in text:
        return await start(update, context)

    return MAIN_MENU

# –ü–†–û–ò–ó–í–û–î–°–¢–í–û: –ù–æ–≤—ã–π –∑–∞–º–µ—Å
async def production_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await start(update, context)

    elif "üÜï –ù–æ–≤—ã–π –∑–∞–º–µ—Å" in text:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
        if 'ticket_created' in context.user_data:
            del context.user_data['ticket_created']
        
        keyboard = [["–ì–µ–ª—å", "–ü–æ—Å—É–¥–∞", "–ê–®", "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=reply_markup)
        return NEW_BATCH_PRODUCT

    elif "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è" in text:
        tickets = db.get_production_tickets()
        if not tickets:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.")
            return PRODUCTION_MENU
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        keyboard = []
        step_map = {
            'awaiting_sample': '–û–∂–∏–¥. –ø—Ä–æ–±—É',
            'awaiting_lab_reception': '–û–∂–∏–¥. –ª–∞–±', 
            'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑',
            'awaiting_discharge': '–û–∂–∏–¥. –æ—Ç–∫–∞—á–∫–∏',
            'awaiting_correction': '–û–∂–∏–¥. –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        }
        
        for ticket in tickets:
            step_text = step_map.get(ticket.get('current_step', ''), ticket.get('current_step', '–ù–æ–≤—ã–π'))
            btn_text = f"üé´ {ticket['ticket_id']} - {ticket['mixer']} - {step_text}"
            keyboard.append([btn_text])
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
        context.user_data['action_tickets'] = {t['ticket_id']: t for t in tickets}
        return ACTION_MENU

    elif "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å" in text:
        status = db.get_mixer_status()
        message = "üìä –°—Ç–∞—Ç—É—Å –º–∏–∫—Å–µ—Ä–æ–≤:\n\n"

        for mixer, info in status.items():
            if info.get('status') == 'free':
                message += f"‚úÖ {mixer}: –°–≤–æ–±–æ–¥–µ–Ω\n"
            else:
                step_map = {
                    'awaiting_sample': '–û–∂–∏–¥. –ø—Ä–æ–±—É',
                    'awaiting_lab_reception': '–û–∂–∏–¥. –ª–∞–±',
                    'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑',
                    'awaiting_discharge': '–û–∂–∏–¥. –æ—Ç–∫–∞—á–∫–∏',
                    'awaiting_correction': '–û–∂–∏–¥. –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
                }
                step_text = step_map.get(info.get('current_step', ''), info.get('current_step', '–í —Ä–∞–±–æ—Ç–µ'))
                message += f"üîÑ {mixer}: {info.get('product', 'N/A')} ({info.get('ticket_id', 'N/A')})\n"
                message += f"   –®–∞–≥: {step_text}\n"

        await update.message.reply_text(message)
        return PRODUCTION_MENU

    return PRODUCTION_MENU

# –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
async def new_batch_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await production_menu(update, context)

    context.user_data['product'] = text

    from config import BRANDS
    keyboard = [[brand] for brand in BRANDS]
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=reply_markup)

    return NEW_BATCH_BRAND

async def new_batch_brand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_product(update, context)

    context.user_data['brand'] = text

    keyboard = [["–°—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"], ["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:", reply_markup=reply_markup)

    return NEW_BATCH_TECHNOLOGY

async def new_batch_technology(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_brand(update, context)

    context.user_data['technology'] = text

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Å–µ—Ä—ã
    product = context.user_data['product']
    technology = context.user_data['technology']
    available_mixers = get_available_mixers(product, technology)

    if not available_mixers:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        await update.message.reply_text("‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Å–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:")
        return NEW_BATCH_TECHNOLOGY

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∏–∫—Å–µ—Ä–∞–º–∏
    keyboard = []
    row = []
    for i, mixer in enumerate(available_mixers):
        row.append(mixer)
        if (i + 1) % 3 == 0:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Å–µ—Ä:", reply_markup=reply_markup)

    return NEW_BATCH_MIXER

async def new_batch_mixer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –º–∏–∫—Å–µ—Ä–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_technology(update, context)

    context.user_data['mixer'] = text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    product = context.user_data['product']
    brand = context.user_data['brand']
    technology = context.user_data['technology']
    mixer = context.user_data['mixer']

    keyboard = [["‚úÖ –°—Ç–∞—Ä—Ç"], ["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"üé´ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞:\n\n"
        f"üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {product}\n"
        f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}\n"
        f"üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: {technology}\n"
        f"‚öóÔ∏è –ú–∏–∫—Å–µ—Ä: {mixer}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:",
        reply_markup=reply_markup
    )

    return CONFIRM_START

async def confirm_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Ç–∏–∫–µ—Ç–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_mixer(update, context)

    if "‚úÖ –°—Ç–∞—Ä—Ç" in text:
        try:
            print(f"DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {context.user_data}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –º–∏–∫—Å–µ—Ä–∞
            mixer = context.user_data['mixer']
            if db.is_mixer_busy(mixer):
                await update.message.reply_text(f"‚ùå –ú–∏–∫—Å–µ—Ä {mixer} —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∏–∫—Å–µ—Ä.")
                return await new_batch_mixer(update, context)

            # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
            ticket_data = {
                'username': context.user_data['username'],
                'product': context.user_data['product'],
                'brand': context.user_data['brand'],
                'technology': context.user_data['technology'],
                'mixer': context.user_data['mixer']
            }

            ticket_id = db.create_ticket(ticket_data)
            print(f"DEBUG: –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            ticket = db.get_ticket(ticket_id)
            message = format_ticket_message(ticket)

            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

            await update.message.reply_text(
                f"‚úÖ –¢–∏–∫–µ—Ç {ticket_id} —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–æ–±—É –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ 70 –º–∏–Ω—É—Ç."
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
            keys_to_clear = ['product', 'brand', 'technology', 'mixer']
            for key in keys_to_clear:
                if key in context.user_data:
                    del context.user_data[key]

        except ValueError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return await new_batch_mixer(update, context)

        return await production_menu(update, context)

    return CONFIRM_START

# –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–∏–∫–µ—Ç–∞–º–∏
async def action_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–æ–º"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await production_menu(update, context)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
    if 'action_tickets' in context.user_data:
        for ticket_id, ticket in context.user_data['action_tickets'].items():
            if ticket_id in text:
                context.user_data['current_ticket'] = ticket
                break

        ticket = context.user_data.get('current_ticket')
        if ticket:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞
            status = ticket['status']
            keyboard = []

            if status in ['production_started', 'awaiting_sample', 'correction_required']:
                keyboard.append(["üì§ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é"])

            if status == 'awaiting_discharge':
                keyboard.append(["‚úÖ –ú–∏–∫—Å–µ—Ä –æ—Ç–∫–∞—á–∞–Ω"])

            keyboard.append(["üîô –ù–∞–∑–∞–¥"])

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            status_text = {
                'production_started': '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–±–æ—Ä–∞ –ø—Ä–æ–±—ã',
                'awaiting_sample': '–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–±—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é',
                'correction_required': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
                'awaiting_discharge': '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–∞—á–∫–∏ –º–∏–∫—Å–µ—Ä–∞'
            }

            await update.message.reply_text(
                f"üé´ –¢–∏–∫–µ—Ç {ticket['ticket_id']}\n"
                f"‚öóÔ∏è {ticket['mixer']} | {ticket['product']}\n"
                f"üìä {status_text.get(status, status)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

            return SAMPLE_SENT

    return ACTION_MENU

async def sample_sent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–±—ã"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await action_menu(update, context)

    if "üì§ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é" in text and ticket:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
        db.update_ticket(ticket['ticket_id'], {
            'status': 'sample_sent',
            'current_step': 'awaiting_lab_reception',
            'action': 'sample_sent_to_lab',
            'username': context.user_data['username']
        })

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        await context.bot.send_message(GROUP_ID, text=message, parse_mode=ParseMode.MARKDOWN)

        await update.message.reply_text("‚úÖ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.")

    elif "‚úÖ –ú–∏–∫—Å–µ—Ä –æ—Ç–∫–∞—á–∞–Ω" in text and ticket:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–∏–∫–µ—Ç - –º–∏–∫—Å–µ—Ä –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è
        db.update_ticket(ticket['ticket_id'], {
            'status': 'completed',
            'current_step': 'completed',
            'action': 'mixer_discharged',
            'username': context.user_data['username']
        })

        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        await context.bot.send_message(GROUP_ID, text=message, parse_mode=ParseMode.MARKDOWN)

        await update.message.reply_text("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–∏–∫—Å–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç
    if 'current_ticket' in context.user_data:
        del context.user_data['current_ticket']
    if 'action_tickets' in context.user_data:
        del context.user_data['action_tickets']

    return await production_menu(update, context)

# –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø
async def lab_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await start(update, context)

    elif "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è" in text:
        tickets = db.get_lab_tickets()
        if not tickets:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return LAB_MENU

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        keyboard = []
        step_map = {
            'awaiting_lab_reception': '–û–∂–∏–¥. –ø—Ä–∏–µ–º–∞',
            'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑'
        }
        
        for ticket in tickets:
            step_text = step_map.get(ticket.get('current_step', ''), ticket.get('current_step', '–í —Ä–∞–±–æ—Ç–µ'))
            btn_text = f"üé´ {ticket['ticket_id']} - {ticket['mixer']} - {step_text}"
            keyboard.append([btn_text])
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
        context.user_data['lab_tickets'] = {t['ticket_id']: t for t in tickets}
        return SAMPLE_RECEIVED

    elif "üìà –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã" in text:
        tickets = db.get_lab_tickets()
        if not tickets:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.")
            return LAB_MENU

        message = "üî¨ –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã:\n\n"
        for ticket in tickets:
            step_map = {
                'awaiting_lab_reception': '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞',
                'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
            }
            step_text = step_map.get(ticket.get('current_step', ''), ticket.get('current_step', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'))
            message += f"üé´ {ticket['ticket_id']} - {ticket['mixer']}\n"
            message += f"   üè∑Ô∏è {ticket['product']} | {ticket['brand']}\n"
            message += f"   ‚è±Ô∏è –°—Ç–∞—Ç—É—Å: {step_text}\n\n"

        await update.message.reply_text(message)
        return LAB_MENU

    return LAB_MENU

async def sample_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–µ–π—Å—Ç–≤–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
    text = update.message.text
    ticket = None

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await lab_menu(update, context)

    # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç
    if 'lab_tickets' in context.user_data:
        for ticket_id, t in context.user_data['lab_tickets'].items():
            if ticket_id in text:
                ticket = t
                context.user_data['current_ticket'] = ticket
                break

    if ticket:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        if ticket.get('status') == 'sample_sent':
            keyboard = [["‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑"], ["üîô –ù–∞–∑–∞–¥"]]
            action_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º –ø—Ä–æ–±—ã –≤ –∞–Ω–∞–ª–∏–∑:"
        else:
            keyboard = [["‚úÖ –î–æ–ø—É—â–µ–Ω", "‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]]
            action_text = "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:"
            
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"üî¨ –¢–∏–∫–µ—Ç {ticket['ticket_id']}\n"
            f"‚öóÔ∏è {ticket['mixer']} | {ticket['product']}\n\n"
            f"{action_text}",
            reply_markup=reply_markup
        )

        return ANALYSIS_RESULT

    return SAMPLE_RECEIVED

async def analysis_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await sample_received(update, context)

    if "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑" in text and ticket:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –ø—Ä–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        db.update_ticket(ticket['ticket_id'], {
            'status': 'sample_received',
            'current_step': 'analysis_in_progress',
            'action': 'sample_received_by_lab',
            'username': context.user_data['username']
        })

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        keyboard = [["‚úÖ –î–æ–ø—É—â–µ–Ω", "‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=reply_markup
        )

        return ANALYSIS_RESULT

    elif "‚úÖ –î–æ–ø—É—â–µ–Ω" in text and ticket:
        # –ü—Ä–æ–¥—É–∫—Ç –¥–æ–ø—É—â–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –æ—Ç–∫–∞—á–∫–∏
        db.update_ticket(ticket['ticket_id'], {
            'status': 'awaiting_discharge',  # –¢–µ–ø–µ—Ä—å —Ç–∏–∫–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            'current_step': 'awaiting_discharge',
            'action': 'analysis_approved',
            'username': context.user_data['username']
        })

        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        await context.bot.send_message(GROUP_ID, text=message, parse_mode=ParseMode.MARKDOWN)

        await update.message.reply_text("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–ø—É—â–µ–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–∞—á–∫–∏ –º–∏–∫—Å–µ—Ä–∞.")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'current_ticket' in context.user_data:
            del context.user_data['current_ticket']
        if 'lab_tickets' in context.user_data:
            del context.user_data['lab_tickets']
            
        return await lab_menu(update, context)

    elif "‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞" in text and ticket:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CORRECTION_NOTE

    return ANALYSIS_RESULT

async def correction_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if text == "üîô –ù–∞–∑–∞–¥":
        return await analysis_result(update, context)

    if ticket and text:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        db.update_ticket(ticket['ticket_id'], {
            'status': 'correction_required',
            'current_step': 'awaiting_correction',
            'action': 'correction_required',
            'username': context.user_data['username'],
            'correction_note': text
        })

        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        message += f"\nüìù –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {text}"

        await context.bot.send_message(GROUP_ID, text=message)
        await update.message.reply_text("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ!")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'current_ticket' in context.user_data:
            del context.user_data['current_ticket']
        if 'lab_tickets' in context.user_data:
            del context.user_data['lab_tickets']
            
        return await lab_menu(update, context)

    return CORRECTION_NOTE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return await start(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    application.post_init = post_init

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [MessageHandler(filters.Regex(r"^(üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ|üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è|üîô –ù–∞–∑–∞–¥)$"), main_menu)],
            PRODUCTION_MENU: [MessageHandler(filters.Regex(r"^(üÜï –ù–æ–≤—ã–π –∑–∞–º–µ—Å|üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è|üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å|üîô –ù–∞–∑–∞–¥)$"), production_menu)],
            LAB_MENU: [MessageHandler(filters.Regex(r"^(üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è|üìà –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã|üîô –ù–∞–∑–∞–¥)$"), lab_menu)],
            NEW_BATCH_PRODUCT: [MessageHandler(filters.Regex(r"^(–ì–µ–ª—å|–ü–æ—Å—É–¥–∞|–ê–®|–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä|üîô –ù–∞–∑–∞–¥)$"), new_batch_product)],
            NEW_BATCH_BRAND: [MessageHandler(filters.Regex(r"^(AOS|Sorti|–ë–∏–æ–ª–∞–Ω|–§—Ä–∏—Ç–∞–π–º|–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è|üîô –ù–∞–∑–∞–¥)$"), new_batch_brand)],
            NEW_BATCH_TECHNOLOGY: [MessageHandler(filters.Regex(r"^(–°—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è|–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è|üîô –ù–∞–∑–∞–¥)$"), new_batch_technology)],
            NEW_BATCH_MIXER: [MessageHandler(filters.Regex(r"^(–ú–∏–∫—Å–µ—Ä_\d+|üîô –ù–∞–∑–∞–¥)$"), new_batch_mixer)],
            CONFIRM_START: [MessageHandler(filters.Regex(r"^(‚úÖ –°—Ç–∞—Ä—Ç|üîô –ù–∞–∑–∞–¥)$"), confirm_start)],
            ACTION_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, action_menu)],
            SAMPLE_SENT: [MessageHandler(filters.Regex(r"^(üì§ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é|‚úÖ –ú–∏–∫—Å–µ—Ä –æ—Ç–∫–∞—á–∞–Ω|üîô –ù–∞–∑–∞–¥)$"), sample_sent)],
            SAMPLE_RECEIVED: [MessageHandler(filters.TEXT & ~filters.COMMAND, sample_received)],
            ANALYSIS_RESULT: [MessageHandler(filters.Regex(r"^(‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑|‚úÖ –î–æ–ø—É—â–µ–Ω|‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞|üîô –ù–∞–∑–∞–¥)$"), analysis_result)],
            CORRECTION_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, correction_note)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('status', production_menu))
    application.add_handler(CommandHandler('help', start))

    print("üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()