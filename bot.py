import logging
import io
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, MenuButtonCommands, BotCommand, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from telegram.constants import ParseMode
from datetime import datetime, timedelta

from config import BOT_TOKEN, GROUP_ID, MSK_TIMEZONE_OFFSET
from database import Database
from utils import format_ticket_message, get_current_shift, get_msk_time, format_msk_time, get_available_mixers, format_status_ru, format_step_ru, format_time_elapsed

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    MAIN_MENU,
    PRODUCTION_MENU,
    LAB_MENU,
    NEW_BATCH_PRODUCT,
    NEW_BATCH_BRAND,
    NEW_BATCH_TECHNOLOGY,
    NEW_BATCH_MIXER,
    CONFIRM_START,
    ACTION_MENU,
    SAMPLE_SENT,
    SAMPLE_RECEIVED,
    ANALYSIS_RESULT,
    CORRECTION_NOTE,
    CONFIRM_DISCHARGE,
    FINAL_APPROVAL
) = range(15)

db = Database()

async def post_init(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"),
        BotCommand("status", "–°—Ç–∞—Ç—É—Å –º–∏–∫—Å–µ—Ä–æ–≤"),
        BotCommand("active", "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"),
        BotCommand("lab", "–¢–∏–∫–µ—Ç—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"),
        BotCommand("shift", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω—ã"),
        BotCommand("export", "–í—ã–≥—Ä—É–∑–∏—Ç—å Excel"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(commands)
    menu_button = MenuButtonCommands()
    await application.bot.set_chat_menu_button(menu_button=menu_button)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π"""
    user = update.message.from_user
    context.user_data['username'] = user.username or user.first_name

    keyboard = [["üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üè≠ –°–∏—Å—Ç–µ–º–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text

    if "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" in text:
        keyboard = [["üÜï –ù–æ–≤—ã–π –∑–∞–º–µ—Å", "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è", "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üè≠ –†–∞–∑–¥–µ–ª –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:", reply_markup=reply_markup)
        return PRODUCTION_MENU

    elif "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è" in text:
        keyboard = [["üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è", "üìà –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üî¨ –†–∞–∑–¥–µ–ª –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:", reply_markup=reply_markup)
        return LAB_MENU

    elif "üîô –ù–∞–∑–∞–¥" in text:
        return await start(update, context)

    return MAIN_MENU

# –ü–†–û–ò–ó–í–û–î–°–¢–í–û: –ù–æ–≤—ã–π –∑–∞–º–µ—Å
async def production_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await start(update, context)

    elif "üÜï –ù–æ–≤—ã–π –∑–∞–º–µ—Å" in text:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
        if 'ticket_created' in context.user_data:
            del context.user_data['ticket_created']
        
        keyboard = [["–ì–µ–ª—å", "–ü–æ—Å—É–¥–∞", "–ê–®", "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=reply_markup)
        return NEW_BATCH_PRODUCT

    elif "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è" in text:
        tickets = db.get_production_tickets()
        if not tickets:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.")
            return PRODUCTION_MENU
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        keyboard = []
        step_map = {
            'awaiting_sample': '–û–∂–∏–¥. –ø—Ä–æ–±—É',
            'awaiting_lab_reception': '–û–∂–∏–¥. –ª–∞–±', 
            'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑',
            'awaiting_discharge': '–û–∂–∏–¥. –æ—Ç–∫–∞—á–∫–∏',
            'awaiting_correction': '–û–∂–∏–¥. –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        }
        
        for ticket in tickets:
            step_text = step_map.get(ticket.get('current_step', ''), ticket.get('current_step', '–ù–æ–≤—ã–π'))
            btn_text = f"üé´ {ticket['ticket_id']} - {ticket['mixer']} - {step_text}"
            keyboard.append([btn_text])
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
        context.user_data['action_tickets'] = {t['ticket_id']: t for t in tickets}
        return ACTION_MENU

    elif "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å" in text:
        return await show_mixer_status(update, context)

    return PRODUCTION_MENU

# –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
async def new_batch_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await production_menu(update, context)

    context.user_data['product'] = text

    from config import BRANDS
    keyboard = [[brand] for brand in BRANDS]
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=reply_markup)

    return NEW_BATCH_BRAND

async def new_batch_brand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –±—Ä–µ–Ω–¥–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_product(update, context)

    context.user_data['brand'] = text

    keyboard = [["–°—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"], ["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:", reply_markup=reply_markup)

    return NEW_BATCH_TECHNOLOGY

async def new_batch_technology(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_brand(update, context)

    context.user_data['technology'] = text

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Å–µ—Ä—ã
    product = context.user_data['product']
    technology = context.user_data['technology']
    available_mixers = get_available_mixers(product, technology)

    if not available_mixers:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        await update.message.reply_text("‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Å–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é:")
        return NEW_BATCH_TECHNOLOGY

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∏–∫—Å–µ—Ä–∞–º–∏
    keyboard = []
    row = []
    for i, mixer in enumerate(available_mixers):
        row.append(mixer)
        if (i + 1) % 3 == 0:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Å–µ—Ä:", reply_markup=reply_markup)

    return NEW_BATCH_MIXER

async def new_batch_mixer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –º–∏–∫—Å–µ—Ä–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_technology(update, context)

    context.user_data['mixer'] = text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    product = context.user_data['product']
    brand = context.user_data['brand']
    technology = context.user_data['technology']
    mixer = context.user_data['mixer']

    keyboard = [["‚úÖ –°—Ç–∞—Ä—Ç"], ["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"üé´ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞:\n\n"
        f"üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {product}\n"
        f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}\n"
        f"üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: {technology}\n"
        f"‚öóÔ∏è –ú–∏–∫—Å–µ—Ä: {mixer}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:",
        reply_markup=reply_markup
    )

    return CONFIRM_START

async def confirm_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Ç–∏–∫–µ—Ç–∞"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await new_batch_mixer(update, context)

    if "‚úÖ –°—Ç–∞—Ä—Ç" in text:
        try:
            print(f"DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {context.user_data}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –º–∏–∫—Å–µ—Ä–∞
            mixer = context.user_data['mixer']
            if db.is_mixer_busy(mixer):
                await update.message.reply_text(f"‚ùå –ú–∏–∫—Å–µ—Ä {mixer} —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∏–∫—Å–µ—Ä.")
                return await new_batch_mixer(update, context)

            # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
            ticket_data = {
                'username': context.user_data['username'],
                'product': context.user_data['product'],
                'brand': context.user_data['brand'],
                'technology': context.user_data['technology'],
                'mixer': context.user_data['mixer']
            }

            ticket_id = db.create_ticket(ticket_data)
            print(f"DEBUG: –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {ticket_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            ticket = db.get_ticket(ticket_id)
            message = format_ticket_message(ticket)

            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=message
            )

            await update.message.reply_text(
                f"‚úÖ –¢–∏–∫–µ—Ç {ticket_id} —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ—Ç–æ–±—Ä–∞—Ç—å –ø—Ä–æ–±—É –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ 70 –º–∏–Ω—É—Ç."
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
            keys_to_clear = ['product', 'brand', 'technology', 'mixer']
            for key in keys_to_clear:
                if key in context.user_data:
                    del context.user_data[key]

        except ValueError as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return await new_batch_mixer(update, context)

        return await production_menu(update, context)

    return CONFIRM_START

# –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–∏–∫–µ—Ç–∞–º–∏
async def action_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–æ–º"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await production_menu(update, context)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
    if 'action_tickets' in context.user_data:
        for ticket_id, ticket in context.user_data['action_tickets'].items():
            if ticket_id in text:
                context.user_data['current_ticket'] = ticket
                break

        ticket = context.user_data.get('current_ticket')
        if ticket:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞
            status = ticket['status']
            keyboard = []

            if status in ['production_started', 'awaiting_sample', 'correction_required']:
                keyboard.append(["üì§ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é"])

            if status == 'awaiting_discharge':
                keyboard.append(["‚úÖ –ú–∏–∫—Å–µ—Ä –æ—Ç–∫–∞—á–∞–Ω"])

            keyboard.append(["üîô –ù–∞–∑–∞–¥"])

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            status_text = {
                'production_started': '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–±–æ—Ä–∞ –ø—Ä–æ–±—ã',
                'awaiting_sample': '–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–±—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é',
                'correction_required': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
                'awaiting_discharge': '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–∞—á–∫–∏ –º–∏–∫—Å–µ—Ä–∞'
            }

            await update.message.reply_text(
                f"üé´ –¢–∏–∫–µ—Ç {ticket['ticket_id']}\n"
                f"‚öóÔ∏è {ticket['mixer']} | {ticket['product']}\n"
                f"üìä {status_text.get(status, status)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

            return SAMPLE_SENT

    return ACTION_MENU

async def sample_sent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–±—ã"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await action_menu(update, context)

    if "üì§ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é" in text and ticket:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
        db.update_ticket(ticket['ticket_id'], {
            'status': 'sample_sent',
            'current_step': 'awaiting_lab_reception',
            'action': 'sample_sent_to_lab',
            'username': context.user_data['username']
        })

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        await context.bot.send_message(GROUP_ID, text=message)

        await update.message.reply_text("‚úÖ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.")

    elif "‚úÖ –ú–∏–∫—Å–µ—Ä –æ—Ç–∫–∞—á–∞–Ω" in text and ticket:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–∏–∫–µ—Ç - –º–∏–∫—Å–µ—Ä –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è
        db.update_ticket(ticket['ticket_id'], {
            'status': 'completed',
            'current_step': 'completed',
            'action': 'mixer_discharged',
            'username': context.user_data['username']
        })

        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        await context.bot.send_message(GROUP_ID, text=message)

        await update.message.reply_text("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–∏–∫—Å–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç
    if 'current_ticket' in context.user_data:
        del context.user_data['current_ticket']
    if 'action_tickets' in context.user_data:
        del context.user_data['action_tickets']

    return await start(update, context)

# –õ–ê–ë–û–†–ê–¢–û–†–ò–Ø
async def lab_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ú–µ–Ω—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
    text = update.message.text

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await start(update, context)

    elif "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è" in text:
        tickets = db.get_lab_tickets()
        if not tickets:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return LAB_MENU

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        keyboard = []
        step_map = {
            'awaiting_lab_reception': '–û–∂–∏–¥. –ø—Ä–∏–µ–º–∞',
            'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑'
        }
        
        for ticket in tickets:
            step_text = step_map.get(ticket.get('current_step', ''), ticket.get('current_step', '–í —Ä–∞–±–æ—Ç–µ'))
            btn_text = f"üé´ {ticket['ticket_id']} - {ticket['mixer']} - {step_text}"
            keyboard.append([btn_text])
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=reply_markup)
        context.user_data['lab_tickets'] = {t['ticket_id']: t for t in tickets}
        return SAMPLE_RECEIVED

    elif "üìà –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã" in text:
        tickets = db.get_lab_tickets()
        if not tickets:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.")
            return LAB_MENU

        message = "üî¨ –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã:\n\n"
        for ticket in tickets:
            step_map = {
                'awaiting_lab_reception': '–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞',
                'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
            }
            step_text = step_map.get(ticket.get('current_step', ''), ticket.get('current_step', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'))
            message += f"üé´ {ticket['ticket_id']} - {ticket['mixer']}\n"
            message += f"   üè∑Ô∏è {ticket['product']} | {ticket['brand']}\n"
            message += f"   ‚è±Ô∏è –°—Ç–∞—Ç—É—Å: {step_text}\n\n"

        await update.message.reply_text(message)
        return LAB_MENU

    return LAB_MENU

async def sample_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–µ–π—Å—Ç–≤–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
    text = update.message.text
    ticket = None

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await lab_menu(update, context)

    # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç
    if 'lab_tickets' in context.user_data:
        for ticket_id, t in context.user_data['lab_tickets'].items():
            if ticket_id in text:
                ticket = t
                context.user_data['current_ticket'] = ticket
                break

    if ticket:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        if ticket.get('status') == 'sample_sent':
            keyboard = [["‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑"], ["üîô –ù–∞–∑–∞–¥"]]
            action_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º –ø—Ä–æ–±—ã –≤ –∞–Ω–∞–ª–∏–∑:"
        else:
            keyboard = [["‚úÖ –î–æ–ø—É—â–µ–Ω", "‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]]
            action_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:"
            
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"üî¨ –¢–∏–∫–µ—Ç {ticket['ticket_id']}\n"
            f"‚öóÔ∏è {ticket['mixer']} | {ticket['product']}\n\n"
            f"{action_text}",
            reply_markup=reply_markup
        )

        return ANALYSIS_RESULT

    return SAMPLE_RECEIVED

async def analysis_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if "üîô –ù–∞–∑–∞–¥" in text:
        return await sample_received(update, context)

    if "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑" in text and ticket:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –ø—Ä–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        db.update_ticket(ticket['ticket_id'], {
            'status': 'sample_received',
            'current_step': 'analysis_in_progress',
            'action': 'sample_received_by_lab',
            'username': context.user_data['username']
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        message = f"üé´ –¢–∏–∫–µ—Ç {ticket['ticket_id']}\n"
        message += f"üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {ticket['product']}\n"
        message += f"‚öóÔ∏è –ú–∏–∫—Å–µ—Ä: {ticket['mixer']}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: –ø—Ä–æ–±–∞ –≤ –ª–∞–±–µ\n"
        message += f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {context.user_data['username']}\n"
        message += f"üî∞ –®–∞–≥: –ê–Ω–∞–ª–∏–∑"

        await context.bot.send_message(GROUP_ID, text=message)
        
        # –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–∑—É
        await update.message.reply_text(
            "‚úÖ –ü—Ä–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –∞–Ω–∞–ª–∏–∑! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É.\n\n"
            "–ö–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ‚Üí "
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if 'current_ticket' in context.user_data:
            del context.user_data['current_ticket']
        if 'lab_tickets' in context.user_data:
            del context.user_data['lab_tickets']
            
        return await start(update, context)

    elif "‚úÖ –î–æ–ø—É—â–µ–Ω" in text and ticket:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–º–µ—Å—É, –µ—Å–ª–∏ –∑–∞–º–µ—Å –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥, –µ—Å–ª–∏ –∑–∞–º–µ—Å –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–µ–∫—Å—Ç–æ–º",
            reply_markup=reply_markup
        )
        
        context.user_data['awaiting_final_approval'] = True
        return FINAL_APPROVAL

    elif "‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞" in text and ticket:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CORRECTION_NOTE

    return ANALYSIS_RESULT

async def correction_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if text == "üîô –ù–∞–∑–∞–¥":
        return await analysis_result(update, context)

    if ticket and text:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        db.update_ticket(ticket['ticket_id'], {
            'status': 'correction_required',
            'current_step': 'awaiting_correction',
            'action': 'correction_required',
            'username': context.user_data['username'],
            'correction_note': text
        })

        updated_ticket = db.get_ticket(ticket['ticket_id'])
        message = format_ticket_message(updated_ticket)
        message += f"\nüìù –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {text}"

        await context.bot.send_message(GROUP_ID, text=message)
        await update.message.reply_text("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ!")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'current_ticket' in context.user_data:
            del context.user_data['current_ticket']
        if 'lab_tickets' in context.user_data:
            del context.user_data['lab_tickets']
            
        return await start(update, context)

    return CORRECTION_NOTE

async def final_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"""
    text = update.message.text
    ticket = context.user_data.get('current_ticket')

    if "üîô –ù–∞–∑–∞–¥" in text:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [["‚úÖ –î–æ–ø—É—â–µ–Ω", "‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return ANALYSIS_RESULT

    if ticket and text and context.user_data.get('awaiting_final_approval'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤
        analysis_details = f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {text}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç - –ø—Ä–æ–¥—É–∫—Ç –¥–æ–ø—É—â–µ–Ω
        db.update_ticket(ticket['ticket_id'], {
            'status': 'awaiting_discharge',
            'current_step': 'awaiting_discharge', 
            'action': 'analysis_approved',
            'username': context.user_data['username']
        })

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤
        updated_ticket = db.get_ticket(ticket['ticket_id'])
        if 'analyses_history' not in updated_ticket:
            updated_ticket['analyses_history'] = []
            
        updated_ticket['analyses_history'].append({
            'timestamp': format_msk_time(get_msk_time()),
            'user': context.user_data['username'],
            'result': 'approved',
            'details': analysis_details,
            'analysis_number': len(updated_ticket.get('analyses_history', [])) + 1
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
        tickets = db._load_tickets()
        for i, t in enumerate(tickets):
            if t['ticket_id'] == ticket['ticket_id']:
                tickets[i] = updated_ticket
                break
        db._save_tickets(tickets)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        message = f"üé´ –¢–∏–∫–µ—Ç {ticket['ticket_id']}\n"
        message += f"üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç: {ticket['product']}\n" 
        message += f"‚öóÔ∏è –ú–∏–∫—Å–µ—Ä: {ticket['mixer']}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: –î–æ–ø—É—â–µ–Ω\n"
        message += f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {context.user_data['username']}\n"
        message += f"üî∞ –®–∞–≥: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–∞—á–∫–∏\n"
        message += f"üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {text}"

        await context.bot.send_message(GROUP_ID, text=message)

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–ø—É—â–µ–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ!\n"
            f"üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏: {text}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–∞—á–∫–∏ –º–∏–∫—Å–µ—Ä–∞."
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        keys_to_clear = ['current_ticket', 'lab_tickets', 'awaiting_final_approval']
        for key in keys_to_clear:
            if key in context.user_data:
                del context.user_data[key]

        return await start(update, context)

    return FINAL_APPROVAL

# –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ú–ï–ù–Æ
async def show_mixer_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–∫—Å–µ—Ä–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status –∏ –∫–Ω–æ–ø–∫–∏)"""
    try:
        status = db.get_mixer_status()
        message = "üìä –°—Ç–∞—Ç—É—Å –º–∏–∫—Å–µ—Ä–æ–≤:\n\n"

        for mixer, info in status.items():
            if info.get('status') == 'free':
                message += f"‚úÖ {mixer}: –°–≤–æ–±–æ–¥–µ–Ω\n"
            else:
                step_map = {
                    'awaiting_sample': '–û–∂–∏–¥. –ø—Ä–æ–±—É',
                    'awaiting_lab_reception': '–û–∂–∏–¥. –ª–∞–±',
                    'analysis_in_progress': '–ê–Ω–∞–ª–∏–∑',
                    'awaiting_discharge': '–û–∂–∏–¥. –æ—Ç–∫–∞—á–∫–∏',
                    'awaiting_correction': '–û–∂–∏–¥. –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
                }
                step_text = step_map.get(info.get('current_step', ''), info.get('current_step', '–í —Ä–∞–±–æ—Ç–µ'))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                total_minutes = info.get('total_time_minutes', 0)
                if total_minutes < 60:
                    time_text = f"{total_minutes} –º–∏–Ω"
                else:
                    hours = total_minutes // 60
                    mins = total_minutes % 60
                    time_text = f"{hours}—á {mins}–º–∏–Ω"
                
                message += f"üîÑ {mixer}: {info.get('product', 'N/A')} ({info.get('ticket_id', 'N/A')})\n"
                message += f"   –®–∞–≥: {step_text}\n"
                message += f"   –í—Ä–µ–º—è: {time_text}\n\n"

        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Å–µ—Ä–æ–≤")

async def show_active_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"""
    try:
        active_tickets = db.get_active_tickets()
        
        if not active_tickets:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")
            return
        
        message = "üé´ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
        for ticket in active_tickets:
            status_map = {
                'production_started': 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
                'awaiting_sample': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–±—ã',
                'sample_sent': 'üì§ –ü—Ä–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                'sample_received': 'üî¨ –í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏',
                'analysis_in_progress': '‚öóÔ∏è –ê–Ω–∞–ª–∏–∑',
                'correction_required': '‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞',
                'awaiting_discharge': 'üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫–∞—á–∫–∏'
            }
            
            status_text = status_map.get(ticket['status'], ticket['status'])
            message += f"‚Ä¢ {ticket['ticket_id']} - {ticket['mixer']}\n"
            message += f"  {ticket['product']} | {ticket['brand']}\n"
            message += f"  {status_text}\n\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤")

async def show_lab_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"""
    try:
        lab_tickets = db.get_lab_tickets()
        
        if not lab_tickets:
            await update.message.reply_text("üî¨ –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")
            return
        
        message = "üî¨ –¢–∏–∫–µ—Ç—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:\n\n"
        for ticket in lab_tickets:
            step_map = {
                'sample_sent': 'üì§ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞',
                'sample_received': 'üî¨ –ü—Ä–∏–Ω—è—Ç–∞',
                'analysis_in_progress': '‚öóÔ∏è –ê–Ω–∞–ª–∏–∑'
            }
            
            step_text = step_map.get(ticket['status'], ticket['status'])
            message += f"‚Ä¢ {ticket['ticket_id']} - {ticket['mixer']}\n"
            message += f"  {ticket['product']} | {step_text}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å —Å–æ–∑–¥–∞–Ω–∏—è
            created_at_str = ticket['created_at']
            if 'Z' in created_at_str:
                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                created_at = created_at + timedelta(hours=MSK_TIMEZONE_OFFSET)
                created_at = created_at.replace(tzinfo=None)
            else:
                created_at_str = created_at_str.split('+')[0]
                created_at = datetime.fromisoformat(created_at_str)
            
            now = datetime.now()
            elapsed = now - created_at
            minutes = int(elapsed.total_seconds() / 60)
            
            if minutes < 60:
                message += f"  –í—Ä–µ–º—è: {minutes} –º–∏–Ω\n\n"
            else:
                hours = minutes // 60
                mins = minutes % 60
                message += f"  –í—Ä–µ–º—è: {hours}—á {mins}–º–∏–Ω\n\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")

async def show_shift_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã"""
    try:
        current_shift = get_current_shift()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
        shift_start_hour = 7 if current_shift == "–¥–Ω–µ–≤–Ω–∞—è" else 19
        now = get_msk_time().replace(tzinfo=None)
        shift_start = datetime(now.year, now.month, now.day, shift_start_hour, 0, 0)
        if now.hour < shift_start_hour:
            shift_start = shift_start - timedelta(days=1)

        all_tickets = db._load_tickets()
        archive_tickets = db._load_archive()
        all_tickets_combined = all_tickets + archive_tickets

        shift_tickets = []
        for ticket in all_tickets_combined:
            created_at_str = ticket['created_at']
            if 'Z' in created_at_str:
                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                created_at = created_at.replace(tzinfo=None)
            else:
                created_at_str = created_at_str.split('+')[0]
                created_at = datetime.fromisoformat(created_at_str)
                
            if created_at >= shift_start:
                shift_tickets.append(ticket)
        
        stats = {
            'total': len(shift_tickets),
            'production': len([t for t in shift_tickets if t.get('status') in ['production_started', 'awaiting_sample', 'correction_required', 'awaiting_discharge']]),
            'lab': len([t for t in shift_tickets if t.get('status') in ['sample_sent', 'sample_received', 'analysis_in_progress']]),
            'completed': len([t for t in shift_tickets if t.get('status') == 'completed'])
        }
        
        message = f"üìä {current_shift.capitalize()} —Å–º–µ–Ω–∞:\n\n"
        message += f"üé´ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {stats['total']}\n"
        message += f"üè≠ –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ: {stats['production']}\n"
        message += f"üî¨ –í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏: {stats['lab']}\n"
        message += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n\n"
        
        if stats['total'] > 0:
            completion_rate = (stats['completed'] / stats['total']) * 100
            message += f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {completion_rate:.1f}%"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω—ã")

async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        await update.message.reply_text("üìä –§–æ—Ä–º–∏—Ä—É—é Excel —Ñ–∞–π–ª...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ app.py
        tickets = db._load_tickets()
        archive = db._load_archive()
        all_tickets = tickets + archive

        if not all_tickets:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        data = []
        for ticket in all_tickets:
            corrections_count = len(ticket.get('corrections_history', []))
            analyses_count = len(ticket.get('analyses_history', []))

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Å –ú–°–ö –≤—Ä–µ–º–µ–Ω–µ–º
            corrections_text = ""
            if ticket.get('corrections_history'):
                for i, correction in enumerate(ticket['corrections_history'], 1):
                    timestamp_str = correction.get('timestamp', '')
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö –≤—Ä–µ–º—è
                    if 'T' in timestamp_str:
                        try:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
                            if 'Z' in timestamp_str:
                                dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                                dt = dt + timedelta(hours=MSK_TIMEZONE_OFFSET)
                            else:
                                timestamp_str = timestamp_str.split('+')[0]
                                dt = datetime.fromisoformat(timestamp_str)
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                            msk_time = dt.strftime("%d.%m.%Y %H:%M:%S")
                            corrections_text += f"{i}. {msk_time} - {correction.get('user', '')}: {correction.get('note', '')}\n"
                        except:
                            corrections_text += f"{i}. {timestamp_str} - {correction.get('user', '')}: {correction.get('note', '')}\n"
                    else:
                        corrections_text += f"{i}. {timestamp_str} - {correction.get('user', '')}: {correction.get('note', '')}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ —Å –ú–°–ö –≤—Ä–µ–º–µ–Ω–µ–º
            analyses_text = ""
            if ticket.get('analyses_history'):
                for i, analysis in enumerate(ticket['analyses_history'], 1):
                    result = "–î–æ–ø—É—â–µ–Ω" if analysis.get('result') == 'approved' else "–û—Ç–∫–ª–æ–Ω–µ–Ω"
                    timestamp_str = analysis.get('timestamp', '')
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö –≤—Ä–µ–º—è
                    if 'T' in timestamp_str:
                        try:
                            if 'Z' in timestamp_str:
                                dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                                dt = dt + timedelta(hours=MSK_TIMEZONE_OFFSET)
                            else:
                                timestamp_str = timestamp_str.split('+')[0]
                                dt = datetime.fromisoformat(timestamp_str)
                            
                            msk_time = dt.strftime("%d.%m.%Y %H:%M:%S")
                            analyses_text += f"{i}. {msk_time} - {analysis.get('user', '')}: {result} - {analysis.get('details', '')}\n"
                        except:
                            analyses_text += f"{i}. {timestamp_str} - {analysis.get('user', '')}: {result} - {analysis.get('details', '')}\n"
                    else:
                        analyses_text += f"{i}. {timestamp_str} - {analysis.get('user', '')}: {result} - {analysis.get('details', '')}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –ú–°–ö
            created_at_msk = ""
            if ticket.get('created_at'):
                created_str = ticket['created_at']
                try:
                    if 'Z' in created_str:
                        dt = datetime.fromisoformat(created_str.replace('Z', '+00:00'))
                        dt = dt + timedelta(hours=MSK_TIMEZONE_OFFSET)
                    else:
                        created_str = created_str.split('+')[0]
                        dt = datetime.fromisoformat(created_str)
                    created_at_msk = dt.strftime("%d.%m.%Y %H:%M:%S")
                except:
                    created_at_msk = created_str

            completed_at_msk = ""
            if ticket.get('completed_at'):
                completed_str = ticket['completed_at']
                try:
                    if 'Z' in completed_str:
                        dt = datetime.fromisoformat(completed_str.replace('Z', '+00:00'))
                        dt = dt + timedelta(hours=MSK_TIMEZONE_OFFSET)
                    else:
                        completed_str = completed_str.split('+')[0]
                        dt = datetime.fromisoformat(completed_str)
                    completed_at_msk = dt.strftime("%d.%m.%Y %H:%M:%S")
                except:
                    completed_at_msk = completed_str

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö
            production_time_minutes = ticket.get('total_production_time_minutes', 0)
            if production_time_minutes:
                hours = production_time_minutes // 60
                minutes = production_time_minutes % 60
                if hours > 0:
                    production_time_formatted = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
                else:
                    production_time_formatted = f"{minutes} –º–∏–Ω—É—Ç"
            else:
                production_time_formatted = ""

            row = {
                'ID_—Ç–∏–∫–µ—Ç–∞': ticket.get('ticket_id', ''),
                '–î–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è_–ú–°–ö': created_at_msk,
                '–î–∞—Ç–∞_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è_–ú–°–ö': completed_at_msk,
                '–ü—Ä–æ–¥—É–∫—Ç': ticket.get('product', ''),
                '–ë—Ä–µ–Ω–¥': ticket.get('brand', ''),
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è': ticket.get('technology', ''),
                '–ú–∏–∫—Å–µ—Ä': ticket.get('mixer', ''),
                '–°—Ç–∞—Ç—É—Å': format_status_ru(ticket.get('status', '')),
                '–¢–µ–∫—É—â–∏–π_—à–∞–≥': format_step_ru(ticket.get('current_step', '')),
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': ticket.get('username', ''),
                '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏': corrections_count,
                '–ò—Å—Ç–æ—Ä–∏—è_–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫': corrections_text,
                '–ê–Ω–∞–ª–∏–∑—ã': analyses_count,
                '–ò—Å—Ç–æ—Ä–∏—è_–∞–Ω–∞–ª–∏–∑–æ–≤': analyses_text,
                '–í—Ä–µ–º—è_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞_–º–∏–Ω': production_time_minutes,
                '–í—Ä–µ–º—è_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': production_time_formatted,  # –ù–û–í–´–ô –°–¢–û–õ–ë–ï–¶
            }
            data.append(row)

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        df = pd.DataFrame(data)
        
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–¢–∏–∫–µ—Ç—ã', index=False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–¢–∏–∫–µ—Ç—ã']
            worksheet.column_dimensions['A'].width = 15
            worksheet.column_dimensions['B'].width = 20
            worksheet.column_dimensions['C'].width = 20
            worksheet.column_dimensions['D'].width = 15
            worksheet.column_dimensions['E'].width = 15
            worksheet.column_dimensions['F'].width = 20
            worksheet.column_dimensions['G'].width = 15
            worksheet.column_dimensions['H'].width = 20
            worksheet.column_dimensions['I'].width = 20
            worksheet.column_dimensions['J'].width = 15
            worksheet.column_dimensions['K'].width = 10
            worksheet.column_dimensions['L'].width = 50
            worksheet.column_dimensions['M'].width = 10
            worksheet.column_dimensions['N'].width = 50
            worksheet.column_dimensions['O'].width = 15
            worksheet.column_dimensions['P'].width = 20  # –ù–û–í–ê–Ø –ö–û–õ–û–ù–ö–ê

        output.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –ú–°–ö –¥–∞—Ç–æ–π
        msk_now = get_msk_time()
        filename = f'production_tickets_{msk_now.strftime("%d-%m-%Y_%H-%M")}_MSK.xlsx'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_document(
            document=InputFile(output, filename=filename),
            caption=f"üìä –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {msk_now.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
                   f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_tickets)}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"""
    help_text = """
ü§ñ *–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
/status - –°—Ç–∞—Ç—É—Å –º–∏–∫—Å–µ—Ä–æ–≤
/active - –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
/lab - –¢–∏–∫–µ—Ç—ã –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏  
/shift - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω—ã
/export - –í—ã–≥—Ä—É–∑–∏—Ç—å Excel
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é:*
üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è - –†–∞–±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏

*–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:*
–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å.

*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
"""
    await update.message.reply_text(help_text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "üîÑ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return await start(update, context)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    application.post_init = post_init

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [MessageHandler(filters.Regex(r"^(üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ|üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è|üîô –ù–∞–∑–∞–¥)$"), main_menu)],
            PRODUCTION_MENU: [MessageHandler(filters.Regex(r"^(üÜï –ù–æ–≤—ã–π –∑–∞–º–µ—Å|üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è|üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å|üîô –ù–∞–∑–∞–¥)$"), production_menu)],
            LAB_MENU: [MessageHandler(filters.Regex(r"^(üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è|üìà –¢–µ–∫—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã|üîô –ù–∞–∑–∞–¥)$"), lab_menu)],
            NEW_BATCH_PRODUCT: [MessageHandler(filters.Regex(r"^(–ì–µ–ª—å|–ü–æ—Å—É–¥–∞|–ê–®|–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä|üîô –ù–∞–∑–∞–¥)$"), new_batch_product)],
            NEW_BATCH_BRAND: [MessageHandler(filters.Regex(r"^(AOS|Sorti|–ë–∏–æ–ª–∞–Ω|–§—Ä–∏—Ç–∞–π–º|–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è|üîô –ù–∞–∑–∞–¥)$"), new_batch_brand)],
            NEW_BATCH_TECHNOLOGY: [MessageHandler(filters.Regex(r"^(–°—Ç–∞—Ä–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è|–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è|üîô –ù–∞–∑–∞–¥)$"), new_batch_technology)],
            NEW_BATCH_MIXER: [MessageHandler(filters.Regex(r"^(–ú–∏–∫—Å–µ—Ä_\d+|üîô –ù–∞–∑–∞–¥)$"), new_batch_mixer)],
            CONFIRM_START: [MessageHandler(filters.Regex(r"^(‚úÖ –°—Ç–∞—Ä—Ç|üîô –ù–∞–∑–∞–¥)$"), confirm_start)],
            ACTION_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, action_menu)],
            SAMPLE_SENT: [MessageHandler(filters.Regex(r"^(üì§ –ü—Ä–æ–±–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é|‚úÖ –ú–∏–∫—Å–µ—Ä –æ—Ç–∫–∞—á–∞–Ω|üîô –ù–∞–∑–∞–¥)$"), sample_sent)],
            SAMPLE_RECEIVED: [MessageHandler(filters.TEXT & ~filters.COMMAND, sample_received)],
            ANALYSIS_RESULT: [MessageHandler(filters.Regex(r"^(‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑|‚úÖ –î–æ–ø—É—â–µ–Ω|‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞|üîô –ù–∞–∑–∞–¥)$"), analysis_result)],
            CORRECTION_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, correction_note)],
            FINAL_APPROVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, final_approval)],
        },
        fallbacks=[CommandHandler('cancel', cancel), CommandHandler('start', start)]
    )

    application.add_handler(conv_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    application.add_handler(CommandHandler('status', show_mixer_status))
    application.add_handler(CommandHandler('active', show_active_tickets))
    application.add_handler(CommandHandler('lab', show_lab_tickets))
    application.add_handler(CommandHandler('shift', show_shift_stats))
    application.add_handler(CommandHandler('export', export_to_excel))
    application.add_handler(CommandHandler('help', show_help))

    print("üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
    application.run_polling()

if __name__ == '__main__':
    main()